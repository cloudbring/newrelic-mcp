name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests
        env:
          USE_REAL_ENV: ${{ secrets.USE_REAL_ENV }}
          NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
          NEW_RELIC_ACCOUNT_ID: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
        run: npm test -- --run

      - name: Check test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Check if version changed
        id: version-check
        run: |
          PUBLISHED_VERSION=$(npm view newrelic-mcp version 2>/dev/null || echo "0.0.0")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$PUBLISHED_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Version changed from $PUBLISHED_VERSION to $PACKAGE_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $PACKAGE_VERSION"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Publish to npm
        if: steps.version-check.outputs.version_changed == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Pack npm tarball
        if: steps.version-check.outputs.version_changed == 'true'
        run: npm pack

      - name: Create GitHub Release
        if: steps.version-check.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version-check.outputs.package_version }}
          name: v${{ steps.version-check.outputs.package_version }}
          generate_release_notes: true
          files: newrelic-mcp-*.tgz
